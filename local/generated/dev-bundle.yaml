kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
    name: foos.grafana-sdk-example.ext.grafana.com
spec:
    group: grafana-sdk-example.ext.grafana.com
    versions:
        - name: v0-0
          served: true
          storage: true
          schema:
            openAPIV3Schema:
                properties:
                    spec:
                        description: |-
                            spec is the schema of our resource. The spec should include all the user-ediable information for the kind.


                            status is where state and status information which may be used or updated by the operator or back-end should be placed
                            If you do not have any such information, you do not need to include this field,
                            however, as mentioned above, certain fields will be added by the kind system regardless.
                            status: {
                            	currentState: string
                            }
                            metadata if where kind- and schema-specific metadata goes. This is typically unused,
                            as the kind system's common metadata is always part of `metadata` and covers most metadata use-cases.
                            metadata: {
                            	kindSpecificField: string
                            }
                        properties:
                            name:
                                type: string
                        required:
                            - name
                        type: object
                    status:
                        properties:
                            additionalFields:
                                description: additionalFields is reserved for future use
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                            operatorStates:
                                additionalProperties:
                                    properties:
                                        descriptiveState:
                                            description: descriptiveState is an optional more descriptive state field which has no requirements on format
                                            type: string
                                        details:
                                            description: details contains any extra information that is operator-specific
                                            type: object
                                            x-kubernetes-preserve-unknown-fields: true
                                        lastEvaluation:
                                            description: lastEvaluation is the ResourceVersion last evaluated
                                            type: string
                                        state:
                                            description: |-
                                                state describes the state of the lastEvaluation.
                                                It is limited to three possible states for machine evaluation.
                                            enum:
                                                - success
                                                - in_progress
                                                - failed
                                            type: string
                                    required:
                                        - lastEvaluation
                                        - state
                                    type: object
                                description: |-
                                    operatorStates is a map of operator ID to operator state evaluations.
                                    Any operator which consumes this kind SHOULD add its state evaluation information to this field.
                                type: object
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                required:
                    - spec
                type: object
          subresources:
            status: {}
    names:
        kind: Foo
        plural: foos
    scope: Namespaced

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: foo-user
rules:
  - apiGroups:
      - grafana-sdk-example.ext.grafana.com
    resources:
      - foos
    verbs:
      - create
      - update
      - patch
      - delete
      - deletecollection
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: foo-lister
rules:
  - apiGroups:
      - grafana-sdk-example.ext.grafana.com
    resources:
      - foos
    verbs:
      - get
      - list
      - watch
---
ï»¿apiVersion: v1
kind: Service
metadata:
  labels:
    name: minio
  name: minio
  namespace: default
spec:
  ports:
    - name: minio-minio
      port: 9000
      targetPort: 9000
  selector:
    name: minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: minio
  template:
    metadata:
      labels:
        name: minio
    spec:
      containers:
        - args:
            - mkdir -p /data/cortex && mkdir -p /data/loki && /usr/bin/minio server /data
          command:
            - /bin/bash
            - -c
          env:
            - name: MINIO_ACCESS_KEY
              value: minio
            - name: MINIO_SECRET_KEY
              value: minio123
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
          image: minio/minio:RELEASE.2021-06-07T21-40-51Z
          imagePullPolicy: IfNotPresent
          name: minio
          ports:
            - containerPort: 9000
              name: minio
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cortex-config
  namespace: default
data:
  config.yaml: |
    # Configuration for running Cortex in single-process mode.
    # This configuration should not be used in production.
    # It is only for getting started and development.

    # Disable the requirement that every request to Cortex has a
    # X-Scope-OrgID header. `fake` will be substituted in instead.
    auth_enabled: false

    server:
      http_listen_port: 9009
      grpc_listen_port: 9095

      # Configure the server to allow messages up to 100MB.
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
      grpc_server_max_concurrent_streams: 1000

    distributor:
      shard_by_all_labels: true
      pool:
        health_check_ingesters: true

    ingester_client:
      grpc_client_config:
        # Configure the client to allow messages up to 100MB.
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
        grpc_compression: gzip

    ingester:
      # We want our ingesters to flush chunks at the same time to optimise
      # deduplication opportunities.
      spread_flushes: true
      chunk_age_jitter: 0

      walconfig:
        wal_enabled: true
        recover_from_wal: true
        wal_dir: /tmp/cortex/wal

      lifecycler:
        # The address to advertise for this ingester.  Will be autodiscovered by
        # looking up address on eth0 or en0; can be specified if this fails.
        # address: 127.0.0.1

        # We want to start immediately and flush on shutdown.
        join_after: 0
        min_ready_duration: 0s
        final_sleep: 0s
        num_tokens: 512
        tokens_file_path: /tmp/cortex/wal/tokens

        # Use an in memory ring store, so we don't need to launch a Consul.
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1

    storage:
      engine: blocks

    blocks_storage:
      tsdb:
        dir: /tmp/cortex/tsdb
      bucket_store:
        sync_dir: /tmp/cortex/tsdb-sync

      backend: filesystem
      filesystem:
        dir: /tmp/cortex/blocks

    purger:
      object_store_type: filesystem

    frontend_worker:
      # Configure the frontend worker in the querier to match worker count
      # to max_concurrent on the queriers.
      match_max_concurrent: true

    # Configure the ruler to scan the /tmp/cortex/rules directory for prometheus
    # rules: https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules
    ruler:
      enable_api: true
      enable_sharding: false
      storage:
        type: s3
        s3:
          s3: http://minio:minio123@minio.default.svc.cluster.local:9000
          bucketnames: cortex
          s3forcepathstyle: true

    querier:
      at_modifier_enabled: true
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: cortex
  name: cortex
  namespace: default
spec:
  ports:
    - name: cortex-http
      port: 9009
      targetPort: 9009
    - name: cortex-grpc
      port: 9095
      targetPort: 9095
  selector:
    name: cortex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: cortex
  template:
    metadata:
      annotations:
        cortex-config-hash: 128d9bf6025033e3552baff9d5bb7715
      labels:
        name: cortex
    spec:
      containers:
        - args:
            - -config.file=/etc/cortex/config.yaml
          env:
            - name: JAEGER_AGENT_HOST
              value: tempo
            - name: JAEGER_ENDPOINT
              value: http://agent.default.svc.cluster.local:14268/api/traces
            - name: JAEGER_SAMPLER_TYPE
              value: const
            - name: JAEGER_SAMPLER_PARAM
              value: "1"
          image: cortexproject/cortex:v1.9.0
          imagePullPolicy: IfNotPresent
          name: cortex
          ports:
            - containerPort: 9009
              name: http
            - containerPort: 9095
              name: grpc
          volumeMounts:
            - mountPath: /etc/cortex
              name: cortex-config
      volumes:
        - configMap:
            name: cortex-config
          name: cortex-config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cortex-ingress
  namespace: default
spec:
  rules:
    - host: cortex.k3d.localhost
      http:
        paths:
          - backend:
              service:
                name: cortex
                port:
                  number: 9009
            path: /
            pathType: Prefix

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-config
  namespace: default
data:
  overrides.yaml: |
    overrides: 
  tempo.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    compactor:
      compaction:
        compacted_block_retention: 24h
    distributor:
      receivers:
        jaeger:
          protocols:
            thrift_compact:
              endpoint: 0.0.0.0:6831
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
    ingester: {}
    storage:
      trace:
        backend: local
        search:
        local:
          path: /tmp/tempo/traces
        wal:
          path: /tmp/tempo/wal 
          v2_encoding: none
          search_encoding: none
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: tempo
  template:
    metadata:
      annotations:
        tempo-config-hash: 1a64b8ef2f49f5c9e8057582936f2f7b
      labels:
        name: tempo
    spec:
      containers:
      - args:
        - -config.file=/conf/tempo.yaml
        - -mem-ballast-size-mbs=1024
        image: grafana/tempo:2.2.0
        imagePullPolicy: IfNotPresent
        name: tempo
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 4317
          name: otlp-http
        volumeMounts:
        - mountPath: /conf
          name: tempo-config
      volumes:
      - configMap:
          name: tempo-config
        name: tempo-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: tempo
  name: tempo
  namespace: default
spec:
  ports:
  - name: tempo-http
    port: 3100
    targetPort: 3100
  - name: tempo-otlp-http
    port: 4317
    targetPort: 4317
  selector:
    name: tempo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana:foo-user-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: foo-user
subjects:
  - kind: ServiceAccount
    name: grafana
    namespace: default
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-sdk-example-app-provisioning
  namespace: default
  labels:
    name: grafana
data:
  gas-local-env-app-app.yaml: |
    apiVersion: 1
    apps:
      - type: grafana-sdk-example-app
        org_id: 1
        org_name: Main Org.
        disabled: false
        jsonData:
          foo: bar
        secureJsonData:
          baz: foo
          kubeconfig: cluster
          kubenamespace: default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: default
  labels:
    name: grafana
data:
  grafana.ini: | 
    [analytics]
    reporting_enabled = false
    [tracing.opentelemetry.otlp]
    address = tempo.default.svc:4317
    [auth.anonymous]
    enabled = true
    org_role = Admin
    [log.frontend]
    enabled = true
    [plugins]
    allow_loading_unsigned_plugins = grafana-sdk-example-app
    [plugin.grafana-sdk-example-app]
    tracing = true
    [server]
    http_port = 3000
    root_url = 
    router_logging = true
    [unified_alerting]
    enabled = true
    [users]
    default_theme = dark
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
  labels:
    name: grafana
spec:
  ports:
    - name: grafana-grafana-metrics
      port: 3000
      targetPort: 3000
    - name: http
      port: 80
      targetPort: 3000
  selector:
    name: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: grafana
  template:
    metadata:
      labels:
        name: grafana
    spec:
      containers:
        - env:
            - name: GF_INSTALL_PLUGINS
            - name: GF_PATHS_CONFIG
              value: /etc/grafana-config/grafana.ini
          image: grafana/grafana-enterprise:9.5.8
          imagePullPolicy: IfNotPresent
          name: grafana
          ports:
            - containerPort: 3000
              name: grafana-metrics
          resources:
            requests:
              cpu: 10m
              memory: 40Mi
          volumeMounts:
            - mountPath: /etc/grafana-config
              name: grafana-config
            - mountPath: /etc/grafana/provisioning/plugins
              name: grafana-sdk-example-app-provisioning
            - mountPath: /var/lib/grafana/plugins/grafana-sdk-example-app
              name: grafana-sdk-example-app
              readOnly: true
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
      serviceAccount: grafana
      volumes:
        - configMap:
            name: grafana-config
          name: grafana-config
        - configMap:
            name: grafana-sdk-example-app-provisioning
          name: grafana-sdk-example-app-provisioning
        - hostPath:
            path: /tmp/k3d/mounted-files/plugin/dist
          name: grafana-sdk-example-app
        - configMap:
            name: grafana-datasources
          name: grafana-datasources
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: default
spec:
  rules:
    - host: grafana.k3d.localhost
      http:
        paths:
          - backend:
              service:
                name: grafana
                port:
                  number: 80
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: grafana
  name: grafana-datasources
  namespace: default
data:
  Cortex.yml: |
    apiVersion: 1
    datasources:
        - access: proxy
          editable: false
          isDefault: true
          name: grafana-k3d-cortex-prom
          type: prometheus
          uid: grafana-prom-cortex
          url: http://cortex.default.svc.cluster.local:9009/api/prom
          version: 1
        - access: proxy
          editable: false
          isDefault: false
          name: grafana-k3d-tempo
          type: tempo
          uid: grafana-traces-tempo
          url: http://tempo.default.svc.cluster.local:3100
          version: 1

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: operator
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: operator:foo-user-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: foo-user
subjects:
  - kind: ServiceAccount
    name: operator
    namespace: default
---

apiVersion: v1
kind: Secret
metadata:
  name: webhook-tls-certs
  namespace: default
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdUekNDQkRlZ0F3SUJBZ0lDQm5vd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1pZeEN6QUpCZ05WQkFZVEFsVlQKTVFrd0J3WURWUVFJRXdBeEZqQVVCZ05WQkFjVERWTmhiaUJHY21GdVkybHpZMjh4R3pBWkJnTlZCQWtURWtkdgpiR1JsYmlCSFlYUmxJRUp5YVdSblpURU9NQXdHQTFVRUVSTUZPVFF3TVRZeE56QTFCZ05WQkFvVExrZHlZV1poCmJtRXRRWEJ3TFZORVN5QkhaVzVsY21GMFpXUWdURzlqWVd3Z1JXNTJhWEp2Ym0xbGJuUWdRMEV3SGhjTk1qTXgKTURBMk1UQXpOekU0V2hjTk16TXhNREEyTVRBek56RTRXakNCcHpFTE1Ba0dBMVVFQmhNQ1ZWTXhDVEFIQmdOVgpCQWdUQURFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekViTUJrR0ExVUVDUk1TUjI5c1pHVnVJRWRoCmRHVWdRbkpwWkdkbE1RNHdEQVlEVlFRUkV3VTVOREF4TmpGSU1FWUdBMVVFQ2hNL1IzSmhabUZ1WVMxQmNIQXQKVTBSTElFZGxibVZ5WVhSbFpDQk1iMk5oYkNCRmJuWnBjbTl1YldWdWRDQlhaV0pvYjI5cklGTmxjblpsY2lCRApaWEowTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF4OFRBWUh4ajl6MUtqdm1TCmJqZ0FOMmpVb0trZ2o5aVNuc256S2hET3ZwSWxYSzFoM1MzVE5SRjB4VHJXZGRvd3J6TWttN1VGVi9jL3JaS00KNWZkTEljRGtPMGtIRVdYWUVSYlBIeUl4Nm1tSmVSOWJxdHQyeDM1cUFWenc0YTRLQndvREJqVG9ERlplWVZWMgp4cFd1OTVaTXpMZ0c1ZUcyRTZYcHJwNFc2eU5TcUhoTnpqTnh3YndtUXRmSGw1YWJsTUFma00zVEZvWk5RYVkyCkc5NHdjUmZPQkNiWFVoZ3ZZKzFpclVieWJNSHhpUlc3dHNEWjR3L2toWWszSmxsUEh4RVRud3EzUWw5U29MMzcKemhJWExTdlNKVTdxUElMNHdmSlBuTWVTY0p5ZElrei9jODliK1VYa3dKelVXM2dkZnJXbXVKQVo5cTVXWmMveApzb3FlLytjT0lmaGl1UHlMRUNHL01JbVRWVzNUOU5YQ1dmbS91b2xzQ3cvRTQra0ZFSnk4WnJBMk9EL00xZ2I0CklPaXBobzM5UERVQnZPMkZIOG1rY1p5SzdwZFFmbXFSYlNQeHJrT0VDcUpZN240dFlORjNHTmMvb2lDc1pUa2IKL1dnK2ZvNHlvYVR2ZzdWeHVEK29sVXRycmR6S2RTTk5Zd3pvNEdRNTJwcTNEMzV3VkZNNXdrOHNnMTkrMEMzSQpUNWFHQmlKZ2lQeUJQMDBlTElVOTVrdnRuYWZsTzVxL0w5UkY0ZHgxMnRMYm5DMkdjdGJreDlpSXhnQ3kySHRGCkRYMjV4TVh6Q2tKR1BVL2QyN0xGQnUzUXp2K3Bya1VDQWFOd0R0b1gxc0xZcDVBRmdCSDZTeUVmdjBNaU03dEQKcWIwdlNGbkQyK2huMTVHMGNnUk9jTE9VN1dzQ0F3RUFBYU9Ca3pDQmtEQU9CZ05WSFE4QkFmOEVCQU1DQjRBdwpIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUE0R0ExVWREZ1FIQkFVQkFnTUVCakJQCkJnTlZIUkVFU0RCR2dpeG5jbUZtWVc1aExYTmtheTFsZUdGdGNHeGxMV0Z3Y0MxdmNHVnlZWFJ2Y2k1a1pXWmgKZFd4MExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBZ0VBSkdGY1JjbGJIZmZFVHdWaFc1cjlPV2l3ZDVPbGFZYWIzRmdnTWJPTlZ4dUF0UnZ0MzJTWHVYamI2UjNzCkV3a0RzRExSNnFxemxmd1RCbk1tRGNERVVMLzYxczMyN00xOUVIRzNwTlFPQmlwK1hUQ3FKYmN6NTVqTmJhRGMKOFhqeVcwR2QxQnc0bG1tK1lKL0piQWhRN1Y5cE1HZkRRWGVNb3NVZ3MvaTFuZ0kvNFQ1dnF4YXQ4N0kySzZIKwpRTlMyN1VUMFdEMFkyUFh4Ym1HMVR0T3JJek1tV3Q2K1pBRXRWQ2RRWHNBYU0wYmQvWFR0VFY3b3AxZHh3NmRGCnF1VmI2eVRTTDg5M1Rmdmh5STZGRGQzeGliM3QvVVdOSFZNNGJpYnZxVm5KYk1qQytPT05HekM1UTZmNHl1S2oKQ3czREZBakxYb3dJa2M4UFNqYmh3MDJISkE1eWtUVTFxd2lnWVNyKytTdjVTdkZGa1VaS0dKcmhxSERMUG53bwpnU0hPRXZCNk9leEswZVJiaE9sU3c5VUpTVWJGMDVrZUI3VCtJRDM5RE11cTZESTJzdTVqNmtzN3N1clFnbjFhCkNabVVaVzdpRU5ZUjlzMGF0LytLUHJtT2FwVDBBd3VMQzBYelhKdDBJUm1oQmEreGg0cmlKOS9UVEpXaFNndHoKaW5RSTNNM0k2R1ZGYk1qcWs2eTdWQW1xTzNJV2wwRjA3WHNiZU1UVDVNa0trL1N5SUNZeUJac3QxdFlSSTZTOQpnU1hMbVg4QjlZaXhWN3BDSzl1eWNodnJ2dThXd05hd2FwUDJINks1anY5SDJ2TkthRmNNa0F3c1BqdStNeDJiClNodytMSUxTMUFMaWdieE1Fc3FOSndaR0R2Wk45QUlwNGZSM2ZlanRsb2Y1NVlRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBeDhUQVlIeGo5ejFLanZtU2JqZ0FOMmpVb0trZ2o5aVNuc256S2hET3ZwSWxYSzFoCjNTM1ROUkYweFRyV2Rkb3dyek1rbTdVRlYvYy9yWktNNWZkTEljRGtPMGtIRVdYWUVSYlBIeUl4Nm1tSmVSOWIKcXR0MngzNXFBVnp3NGE0S0J3b0RCalRvREZaZVlWVjJ4cFd1OTVaTXpMZ0c1ZUcyRTZYcHJwNFc2eU5TcUhoTgp6ak54d2J3bVF0ZkhsNWFibE1BZmtNM1RGb1pOUWFZMkc5NHdjUmZPQkNiWFVoZ3ZZKzFpclVieWJNSHhpUlc3CnRzRFo0dy9raFlrM0psbFBIeEVUbndxM1FsOVNvTDM3emhJWExTdlNKVTdxUElMNHdmSlBuTWVTY0p5ZElrei8KYzg5YitVWGt3SnpVVzNnZGZyV211SkFaOXE1V1pjL3hzb3FlLytjT0lmaGl1UHlMRUNHL01JbVRWVzNUOU5YQwpXZm0vdW9sc0N3L0U0K2tGRUp5OFpyQTJPRC9NMWdiNElPaXBobzM5UERVQnZPMkZIOG1rY1p5SzdwZFFmbXFSCmJTUHhya09FQ3FKWTduNHRZTkYzR05jL29pQ3NaVGtiL1dnK2ZvNHlvYVR2ZzdWeHVEK29sVXRycmR6S2RTTk4KWXd6bzRHUTUycHEzRDM1d1ZGTTV3azhzZzE5KzBDM0lUNWFHQmlKZ2lQeUJQMDBlTElVOTVrdnRuYWZsTzVxLwpMOVJGNGR4MTJ0TGJuQzJHY3Ria3g5aUl4Z0N5Mkh0RkRYMjV4TVh6Q2tKR1BVL2QyN0xGQnUzUXp2K3Bya1VDCkFhTndEdG9YMXNMWXA1QUZnQkg2U3lFZnYwTWlNN3REcWIwdlNGbkQyK2huMTVHMGNnUk9jTE9VN1dzQ0F3RUEKQVFLQ0FnQjRwWjc1cHFaSS96ODBNZzM1ZXVER2xnMDBLbkI3NzNROWFnSHRlZEVpenVpNW5BenFvMjVYTW4rdgpUZVdQcjRLUGpQZWpBaVNFQjlMeFpQeXJOanF0Mit6NjBSUHZzZTVZQThwN0p3KzJYcDZrQkFnOG0rYVVmUWhRClltMG9Idy8zU0Zpak92aVoydCtOTVN4V3FyZk0xM3p5ZG9IVC9Ba1d2TER3d0pGZTJTcG1qS0dRMHdqMDFFalgKUGJKUkhxZy9vZmh1WDZBSWpudkNGanUvZ09VSXFEUEgxaDFjZXpiRHh1NDljQWVoSDFCY1ZqL1VFNHlEMFdsVwpMSlNlR0huc2JVZklXWlJzQlYzRnJuZVE4T1FHWjl5Mm8zNWJwVTNPOUNTWXJ2OEYrOC82a3o0RUYwdVl0RmwrCjZqaG1OWmk2bWNKaTNNU1JjcUREUkY3WVVWZk1hekpDenFUMEl3QkJsdlR3M3gzbEJYY1d2cDJ1TjlVRjVvM1cKTGhxSm1DdjJxc1FBZW9GQkdSMmFXVkFCdCs0OVRnMWt1bHFPUGdodSt2bkNmK2UxMW5pVFhQd2dJWlVqRy91Tgo3ZitIRFlidk1CQ2N6TDUxUGM4MjBubDRja05CWEJSL2pDK0M0bktWaXVpRFNLT1dNNjlwWWFhc2V2bXBQYTYxCkdTRlduWXV6bnVmeVVHUmlabmZzcnNIVGNQbHA3V3VpVHBlOGRyVUx3N2RnZVlOT2s4b2lhREU5MUNncWdOcGUKYnFaaUtJVWprWEFlN01DVHA3dFZxb29pQUFlRFloSkJqeW9UdzEvVml2SUJTbHZlYVAwa2hDNmlXMFRoSUh5ZQpiYlMvN2dNcEMycm5Bb2x6UHZ1UXkrTUF3ZnFiRnlqYlk0bEczTEd0ckc4ZmNXWkl3UUtDQVFFQTgvS0VuREFvCmJ1TXJKYkw2RnlvNDVOVUwveTlIUDc5dFNic1ZlcHNSQytPOS9Bd0NKTUxEOHZXWTZuNWJnUCt5cXNuZm56VHAKM2NpWENRMWpYNUVHMU11MUlVdzAxN01KcEs5cnl0SWhIQiszVHVlMmZubGpvOUVhRUhlQzViVGpKb1RkaHkvMQozNmpQSjAvbERqWWZ6ajBiL3cxQ1JJdVlzS3BwMWlNeDRjV3V1cnlEaHM4WTIyRXZWdTIxSlZ0Qk1heWZLNFJyCitxbjhVRHVYVityMVBnRUUwa1UzQkFOWUowV3B3TXNkZEw4SXJmM1VtOWVYNlU0dHdtSWtXSVo5SEdZN3hLUk4Kais4WmtHcURobkdpRm5xSXFmLzNpNnQ4U3JKa21KVmJ2MENkb2FNR3I2NU9qUlUxVWk5OXZyMC93ZGJ0Y1ZGZQpoTW5RUGVaZVB6UkJzd0tDQVFFQTBhTjBLcWVrU3pCanRZRlZzeEpqaC9YTkpQMGRtOWI1T0d4S2k2bnhLdmZICnlHSi9nejBNZk4zeFpGVDJSdUpnQ0VoN0Z1ZCtpUFFtMVBqZDVqQTVlV3BwUkRQdU1Md2tWMjcxV0w3OUhBR0cKRW9MaDc5NmcwdnI3ZHBEbWs5ajcxVHV6UzVLeTJFSk01ZllHa0xydVJ6bjdtOVEwSDc2Mkdaa3p0anFjTUpYeApKbDlIS2JQVjBEQnhSUk9wZEpPYnUvZGN6U3ZYSXFJZTBQNm94aGJ3enZFSU9aYnZZeDdSWFp0b2p3VHMxckR1CmdLS0xDOW1DNVl1Sy9jOUw2TWU4T3M4S1dUdkd1OWozN2VPSExiK0VPTjhxK20yWTZ2MHRWMllTNnArNW1OQ0kKYWloc2lPNStDRUN2ME9DTndhMVRFUWZ6YmhTRVYvZDVqb3RqUDVhWmFRS0NBUUI2cSsyN2pRd0lGdnhQak56dQpZVEVUQVg5eTU1ZHdteGFlQ1JJWUFYcGsvRFZCVmRpT0c5TGxqbE5ET0I5VGswR0pXTkszQUtqSittRFpFSDUwClJEMm5MSGo5TVpFeEZyczJzWEFISWZ1OFpNYU5TMEFlQVhUMW4rVDNldUc4R1daUXJHZXAzNWhJekY2L2FoSEoKUDdabXc1d2NlZEpsSGIyK3VUTlhsNE15QVhLSVBOdjNJcFZoWEZHdDZRTTZzZFRxNGQ5NHhySjE3cDBPeTZpagpjV2U1c2xGMlc0LzYyS092dS94TkV0YlJLbTkyN3puRzFIZHp2dmlMMDBacnJkV2tQbFMzNGRlUEZiRkpTZ2F4CnlOcTFheERtUysxenN0eGh3NnVLZnpFUHo3SjA0Y0l1L2Z4S1BlditWQnRybTBkQWRwQVlkODZMLytCVUFGQk0KZ0Q2NUFvSUJBQjRTWFdLVkE2dEplTFFicG1oMmxkSjEvd1IwVHFBQk9XVFBtKzNtNWRKdEVycDY3cUdyeXpQSwpQb3RPNkxrSVZoQTZIWFlPcFFjT1J0ZThEMUNxMEVQTGNPZzRyczFNMzhXdkJBREQvTmpjbXhmaXNIaFJMaTYxCmxBYlJDRkpqQ05Ud3FHcUowNS9UK3VYdDRjazNGMkVlUHlwK1NTL1lrcFNmZGx5SWtja2lhU0pBL3B0TDBicjQKaC9jSnVBQWlBRy81THRXN21UTzluOEFKRjdxNnBiWjV1dDFQK216MGljSHN2aFh0OWU5aUdBUlp6S3BaZkQ1agpRdi9ma1pzRnM4bVgwM3N6YVBHZlVRbE4zeUUvM0w2dnZLR0p3U3JNUUluTitaNndaTlkzNjZtV3ZPTHpteDZoCjhOWjhyN2o5blBIUGV5cnFSSVc5MlRFS2E2VStmQ2tDZ2dFQUdnSEs0YjVET2hSUU1FYXFaYk92V2UxZ2FoQ0sKWHk5c25VM0FXNmNYQ2RCVFVuUHFuMFJucExSd0xjdnFEbldUNXJxSHFaL0F5MENWdkdjQ3p6eVBDZmpKWG40Vgo5MkZ2cXBYR24vOTQ5UmErN2RzTGZ1VmFuN1dqQTRnSlJHcXpXbW9tbDZBcG1lVEtMQTBHVyswbnlSUXpGU1JpClNLQjcwZS9ZSFZwWk1BUlhEVHNBdEFSb0ZoUzQ2NllFcXZoRHROaWVJRXRVaW5GRnFPQUdIUTNlTDVlUXY5aDQKY2RHZGZTV3RxZENEVUtqY0RYU1l5QVFleWx4MXg5dUtUajZmRm9yR2w5U1NCaUduUG1uYjQ1VWVxN3dkS3FHNwp3TnFHbVo3ejM1RHRoYXdGQVhMMll3OFM5dTZ2Y2E2bjdlYTBocmRVaHhSamhkVjk2clpDWWQwSER3PT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-sdk-example-app-operator
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: grafana-sdk-example-app-operator
  template:
    metadata:
      labels:
        name: grafana-sdk-example-app-operator
    spec:
      serviceAccount: operator
      containers:
        - image: localhost/grafana-sdk-example:latest
          imagePullPolicy: IfNotPresent
          name: grafana-sdk-example-app-operator
          env:
            - name: OTEL_HOST
              value: tempo.default.svc
            - name: OTEL_PORT
              value: "4317"
            - name: OTEL_CONN_TYPE
              value: grpc
            - name: OTEL_SERVICE_NAME
              value: "grafana-sdk-example-app-operator"

            - name: WEBHOOK_PORT
              value: "8443"
            - name: WEBHOOK_CERT_PATH
              value: /run/secrets/tls/tls.crt
            - name: WEBHOOK_KEY_PATH
              value: /run/secrets/tls/tls.key

          ports:
            - containerPort: 9090
              name: metrics

            - containerPort: 8443
              name: webhook-api
          volumeMounts:
            - name: webhook-certs
              mountPath: /run/secrets/tls
              readOnly: true
      volumes:
        - name: webhook-certs
          secret:
            secretName: webhook-tls-certs

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-sdk-example-app-operator
  namespace: default
spec:
  selector:
    name: grafana-sdk-example-app-operator
  ports:
    - name: metrics
      port: 9090
      targetPort: metrics

    - name: webhook-api
      port: 443
      targetPort: webhook-api


---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: grafana-sdk-example-app-operator-val-webhook
webhooks:
  - name: grafana-sdk-example-app-operator.default.svc
    sideEffects: None
    admissionReviewVersions: ["v1","v1beta1"]
    clientConfig:
      service:
        name: grafana-sdk-example-app-operator
        namespace: default
        path: "/validate"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdDekNDQS9PZ0F3SUJBZ0lDQitNd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1pZeEN6QUpCZ05WQkFZVEFsVlQKTVFrd0J3WURWUVFJRXdBeEZqQVVCZ05WQkFjVERWTmhiaUJHY21GdVkybHpZMjh4R3pBWkJnTlZCQWtURWtkdgpiR1JsYmlCSFlYUmxJRUp5YVdSblpURU9NQXdHQTFVRUVSTUZPVFF3TVRZeE56QTFCZ05WQkFvVExrZHlZV1poCmJtRXRRWEJ3TFZORVN5QkhaVzVsY21GMFpXUWdURzlqWVd3Z1JXNTJhWEp2Ym0xbGJuUWdRMEV3SGhjTk1qTXgKTURBMk1UQXpOekUyV2hjTk16TXhNREEyTVRBek56RTJXakNCbGpFTE1Ba0dBMVVFQmhNQ1ZWTXhDVEFIQmdOVgpCQWdUQURFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekViTUJrR0ExVUVDUk1TUjI5c1pHVnVJRWRoCmRHVWdRbkpwWkdkbE1RNHdEQVlEVlFRUkV3VTVOREF4TmpFM01EVUdBMVVFQ2hNdVIzSmhabUZ1WVMxQmNIQXQKVTBSTElFZGxibVZ5WVhSbFpDQk1iMk5oYkNCRmJuWnBjbTl1YldWdWRDQkRRVENDQWlJd0RRWUpLb1pJaHZjTgpBUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTFcrMnVHYkxDSG4xUHJKemhGaml4cnhSMzRiM0p2SWhQSzl0RWpiCmh5MngzbWNGaUdXbGFnc09xbFZhU1BiZC9BVlJMQjNPVnF4T094MzBwV2xjYnRCbWd6UnBhSFlsWmV6OEtUNHEKb1lmZElZNk9YRGRGUjN6OGlEQ3pVazQ5WHA5SE1lUURxazF6K0hFa01wMHJZdWtGZ09WVlUyVGQ5QWFWa3NxTApvbm5DK3h1U2RTSWJkWnBycjlDajJNNkwwRVdVeXhZSnY2MUs3ejlIUjNOdXJlOTdCci9rTXBna0hCb2J0V3ZxCkpqeHJLbkw2TUFmUXQvYkR1WXJTRzhSRFFMcUJpK3BmVmdpMkptYy9RTnBuWC9XVU1iOU5CZ0h6TllVRnZWSFkKTzhUUWltMk84T2owU1A0ejV2emlCRTlYSUUrbGlBOVphVk1ZbW5zUTRPL1NDa013ZlRIUVFaeW8yeWNveUFWSAo1eTMweXJsbHRaNGxYb1V3eFZyMW9pd2RHMUNuMlN2YS9ZbmJLQUVlak1xcUtWOCttMDlpcHQ5OG03QWFFMVRUCmRQWG9ldkRUUEpIblltNUo1STVtWHdwSThUM1YvVmRVaU9zUjVqWlh3L2FWOThrYzJZaFR2c0svdVFFSmtsVVkKcnJ1bHlCYS9MMy9CdzM5MTlqRjNXclFMaE42QmI2dGdkT2hPbnFHaTNqV1BGbHNhRk1rMGQ5YjdjRzExVC9OegpWa3ZYc1AyMElkRFEya0dyditESXFTMEt2M0F5L3FMaTRrUnZXYVNzcktTS0g3a3B2OVlmK0pUckJ3aHdZTFg0CnI4dllqQzNWOFExMlpWU1UwZUhxM3lXdTgxUHdVWU1NT1Vrd2E3Y2hPdHZuaGx2dW90UWJnZTVMQmkra3dud0QKMTF4bEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjRApBZ1lJS3dZQkJRVUhBd0V3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVVlB0UG9QMkZkTSs1CksvcEdVdFRyOU9pQlEya3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBQXRuK3BML2N0QUNCU1orenlFY0lOekEKME15RnhpRmwxWWZIeXFDTTlwTGtGT05uSUpuV3ptTWlmTzBqTkIxaDNCVjZZZ1hwSWRRTkRiaXllM3J6NFd6cwo1U2VaeGNmR3FVbEY3cktLQ09nNTFVZTJKVUJWSnE3WHpYVzdRYzdJTkRLcjNmZTFhaDZ0Uk4rNXU5aHdtOEVqCnFaUG9OdExObldYd3lyZi82ekVVdEdveUpGeDRQbzBuYzhrMFpEc250Y21vbWtKQVI2eXRGa0tZSEZRT0F3VHoKMFpLNldWU2I5eVk0OWRsWE9WSW0xZGc3U21ob2kxdFJiZEhWM3RtZDdpZWxoM043NlVERG9iMGtOVmZ0OUZXSApldnVaWVRvODlhUEdNSXEwdEpWaHdqa3dOc2RmU2Npb1l2ZmVUSVdHbk1vd1pwcHppNXhuVzBzc2FBRXFEUWVTCnI0V2RaL1h2VHV3OFhhdStBWU5HUWdZTWR1cmpJUVpFQVQ5RGd0RjczeVVVbVVhSHpNY0lJYjlNTUhzdHJSWmYKbmdLK2ZoUTVUVXZUNC9la1B1eFovM3hRczhhRVFlbm1SYUQ5Y2xCUnBtRm91ekQ1MklEVmRML3p3bXVOQUgxcQpUYTNobGZxNnJmVkJhdTg5TWJtanRTZmkwSGc2eklyVTNKaVJ6VlNFVW9WTG9adTBHTjlJWHdodEdqM01PdDJCClIxZ2NaNEVYdFpYNldsRHBMd3dJaWJob0I3N0ttUjlzUmtCNW5GcUEzRGV3MjRWdDBPWTBGMVhKbFA3cWROVjEKTFE1cHoyWjFWZEhLMy9mTjZ0RnhVb0ttYjNhVUNMejVkcWplZUtGRHJqM3RYa25RSTBqNENsd3o4NzcreTU5bApORFBuQlJOMG9YWmM4cDAvUERxRQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    rules:
    - operations: ["CREATE","UPDATE","DELETE"]
      apiGroups: ["grafana-sdk-example.ext.grafana.com"]
      apiVersions: 
        - v0-0
      resources: ["foos"]
  
